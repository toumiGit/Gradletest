apply plugin: 'java'
apply plugin: 'war'
//version = 0.1
apply plugin: 'jetty'
sourceCompatibility = 1.8

jettyRun {
    httpPort = 9090
    contextPath = 'todo'
}

task wrapper(type: Wrapper) {                   //pour eviter incompatibilite de version
    gradleVersion = '2.0'
}


jar {
    manifest {
        attributes 'Main-Class' : 'main.java.business.ToDoApp'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
    providedCompile 'javax.servlet:servlet-api:2.5'                                 //classe besoin pour compil mais fournie en runtime
    runtime 'javax.servlet:jstl:1.1.2'
}


assert project.exampleProp == 'myValuetesting'
task printGradleProperty << {
    println "Second property: $someOtherProp"
}



task printVersion {
    doFirst{
        println " before reading the project verison"
    }
    doLast {
        println "Version: $version"
    }
}



task first << {println "first" }
task prinVersionDepending (dependsOn: [first]) << { logger.quiet( " Version : $version")}


class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}

task printVersionObject << {
    logger.quiet "Version: $version"
}


ext.versionFile = file('version.properties')
task loadVersion {
    project.version = readVersion();
}
ProjectVersion  readVersion()
{
    logger.quiet( ' reading the file version ');
    if ( !versionFile.exists()) { throw new GradleException( " Required version file not exist : $versionFile.canonicalPath" ) }
    Properties versionProps = new Properties()
    versionFile.withInputStream { stream -> versionProps.load(stream) }
    return new ProjectVersion( versionProps.major.toInteger() , versionProps.minor.toInteger() , versionProps.release.toBoolean())
}

//custom task
class ReleaseVersionTask extends DefaultTask {
            @Input Boolean release        //inputs. pemet a gradle  de n executer ce code qu en cas de necessite
            @OutputFile File destFile                            // pareil pour output code:


    ReleaseVersionTask()
    {
        group = 'versionning'
        description = 'here is my desription'
    }

    @TaskAction
    void start()
    {
        project.version.release = true
        ant.propertyfile( file : destFile){
            entry(key: 'release', type: 'string', operation: '=', value: 'true')
        }
    }

        }

    //enhanced task
    task makeReleaseVersion ( type : ReleaseVersionTask ) {
                release = version.release
                destFile = versionFile
            }


task createDistribution(type: Zip, dependsOn: makeReleaseVersion) {
    from war.outputs.files;
    from(sourceSets*.allSource) {
        into 'src'
    }
    from(rootDir) {
        include versionFile.name
    }
}

task backupReleaseDistribution(type: Copy) {
    from createDistribution.outputs.files
    into "$buildDir/backup"
}

task release(dependsOn: backupReleaseDistribution) << {
    logger.quiet 'Releasing the project'
}

tasks.addRule( "Pattern: increment<Classifier>Version - Increments the project version classifier"){
    String taskName -> if (taskName.startsWith('increment') && taskName.endsWith('Version')) {
        task (taskName) << {
            String classifier = (taskName - 'increment' - 'Version'.toLowerCase())
            String currentVersion = version.toString()
            switch (classifier ){
                case 'major' : ++version.major
                                break
                case 'minor' : ++version.minor
                                break
                default : throw new GradleException(" invalid Version")
            }
            String newVersion = version.toString()
            logger.info "Incrementing "
            ant.propertyfile ( file : versionFile) {
                entry (key : classifier, type: 'int', operation: '+', value: 1)
            }
        }
    }
}