apply plugin: 'java'
apply plugin: 'war'
//version = 0.1
apply plugin: 'jetty'
sourceCompatibility = 1.8

jettyRun {
    httpPort = 9090
    contextPath = 'todo'
}

task wrapper(type: Wrapper) {                   //pour eviter incompatibilite de version
    gradleVersion = '2.0'
}


jar {
    manifest {
        attributes 'Main-Class' : 'main.java.business.ToDoApp'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.1'
    providedCompile 'javax.servlet:servlet-api:2.5'                                 //classe besoin pour compil mais fournie en runtime
    runtime 'javax.servlet:jstl:1.1.2'
}


assert project.exampleProp == 'myValuetesting'
task printGradleProperty << {
    println "Second property: $someOtherProp"
}



task printVersion {
    doFirst{
        println " before reading the project verison"
    }
    doLast {
        println "Version: $version"
    }
}



task first << {println "first" }
task prinVersionDepending (dependsOn: [first]) << { logger.quiet( " Version : $version")}


class ProjectVersion {
    Integer major
    Integer minor
    Boolean release

    ProjectVersion(Integer major, Integer minor) {
        this.major = major
        this.minor = minor
        this.release = Boolean.FALSE
    }

    ProjectVersion(Integer major, Integer minor, Boolean release) {
        this(major, minor)
        this.release = release
    }

    @Override
    String toString() {
        "$major.$minor${release ? '' : '-SNAPSHOT'}"
    }
}

task printVersionObject << {
    logger.quiet "Version: $version"
}


ext.versionFile = file('version.properties')
task loadVersion {
    project.version = readVersion();
}
ProjectVersion  readVersion()
{
    logger.quiet( ' reading the file version ');
    if ( !versionFile.exists()) { throw new GradleException( " Required version file not exist : $versionFile.canonicalPath" ) }
    Properties versionProps = new Properties()
    versionFile.withInputStream { stream -> versionProps.load(stream) }
    return new ProjectVersion( versionProps.major.toInteger() , versionProps.minor.toInteger() , versionProps.release.toBoolean())
}

task makeReleaseVersion ( group : 'versionning' , description : 'makes project in release version') {
            inputs.property('release', version.release)         //inputs. pemet a gradle  de n executer ce code qu en cas de necessite
            outputs.file versionFile                            // pareil pour output code:
            doLast {
                version.release = true
                ant.propertyfile ( file: versionFile) {
                            entry ( key : 'release' , type: 'string' ,  operation : '=', value : 'false')
                        }
            }
        }
